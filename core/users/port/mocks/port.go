// Code generated by MockGen. DO NOT EDIT.
// Source: port.go

// Package port is a generated GoMock package.
package port

import (
	reflect "reflect"

	domain "github.com/adidahmad/perqara-test/core/users/domain"
	entity "github.com/adidahmad/perqara-test/core/users/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIUsersService is a mock of IUsersService interface.
type MockIUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockIUsersServiceMockRecorder
}

// MockIUsersServiceMockRecorder is the mock recorder for MockIUsersService.
type MockIUsersServiceMockRecorder struct {
	mock *MockIUsersService
}

// NewMockIUsersService creates a new mock instance.
func NewMockIUsersService(ctrl *gomock.Controller) *MockIUsersService {
	mock := &MockIUsersService{ctrl: ctrl}
	mock.recorder = &MockIUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsersService) EXPECT() *MockIUsersServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUsersService) Create(data domain.CreateUserRequest) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", data)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUsersServiceMockRecorder) Create(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUsersService)(nil).Create), data)
}

// DeleteById mocks base method.
func (m *MockIUsersService) DeleteById(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIUsersServiceMockRecorder) DeleteById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIUsersService)(nil).DeleteById), id)
}

// GetById mocks base method.
func (m *MockIUsersService) GetById(id string) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIUsersServiceMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIUsersService)(nil).GetById), id)
}

// GetList mocks base method.
func (m *MockIUsersService) GetList() ([]domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList")
	ret0, _ := ret[0].([]domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockIUsersServiceMockRecorder) GetList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockIUsersService)(nil).GetList))
}

// Update mocks base method.
func (m *MockIUsersService) Update(id string, data domain.UpdateUserRequest) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, data)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIUsersServiceMockRecorder) Update(id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUsersService)(nil).Update), id, data)
}

// MockIUsersRepository is a mock of IUsersRepository interface.
type MockIUsersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUsersRepositoryMockRecorder
}

// MockIUsersRepositoryMockRecorder is the mock recorder for MockIUsersRepository.
type MockIUsersRepositoryMockRecorder struct {
	mock *MockIUsersRepository
}

// NewMockIUsersRepository creates a new mock instance.
func NewMockIUsersRepository(ctrl *gomock.Controller) *MockIUsersRepository {
	mock := &MockIUsersRepository{ctrl: ctrl}
	mock.recorder = &MockIUsersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsersRepository) EXPECT() *MockIUsersRepositoryMockRecorder {
	return m.recorder
}

// DeleteById mocks base method.
func (m *MockIUsersRepository) DeleteById(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIUsersRepositoryMockRecorder) DeleteById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIUsersRepository)(nil).DeleteById), id)
}

// FindAll mocks base method.
func (m *MockIUsersRepository) FindAll() ([]*entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIUsersRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIUsersRepository)(nil).FindAll))
}

// FindById mocks base method.
func (m *MockIUsersRepository) FindById(id string) (entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockIUsersRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockIUsersRepository)(nil).FindById), id)
}

// Insert mocks base method.
func (m *MockIUsersRepository) Insert(data entity.Users) (entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", data)
	ret0, _ := ret[0].(entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockIUsersRepositoryMockRecorder) Insert(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIUsersRepository)(nil).Insert), data)
}

// Update mocks base method.
func (m *MockIUsersRepository) Update(id string, data entity.Users) (entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, data)
	ret0, _ := ret[0].(entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIUsersRepositoryMockRecorder) Update(id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUsersRepository)(nil).Update), id, data)
}
